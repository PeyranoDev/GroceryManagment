# Script de inicializaci√≥n para Windows PowerShell
# GroceryManagement - Sistema de Gesti√≥n de Verduler√≠as

param(
    [Parameter(Position=0)]
    [string]$Command = "help"
)

# Funci√≥n para mostrar mensajes con colores
function Write-ColoredMessage {
    param(
        [string]$Message,
        [string]$Color = "White"
    )
    Write-Host $Message -ForegroundColor $Color
}

function Write-Header {
    param([string]$Title)
    Write-Host ""
    Write-ColoredMessage "üöÄ $Title" "Cyan"
    Write-Host "=============================================="
}

# Verificar si Docker est√° instalado
function Test-Docker {
    try {
        $null = docker --version
        $null = docker-compose --version
        Write-ColoredMessage "‚úÖ Docker y Docker Compose est√°n disponibles" "Green"
        return $true
    }
    catch {
        Write-ColoredMessage "‚ùå Docker o Docker Compose no est√°n instalados." "Red"
        Write-ColoredMessage "Por favor instala Docker Desktop primero." "Red"
        return $false
    }
}

# Funci√≥n para mostrar ayuda
function Show-Help {
    Write-Host ""
    Write-ColoredMessage "GroceryManagement - Sistema de Gesti√≥n de Verduler√≠as" "Cyan"
    Write-Host ""
    Write-Host "Uso: .\start.ps1 [COMANDO]"
    Write-Host ""
    Write-Host "Comandos disponibles:"
    Write-Host "  prod     - Iniciar en modo producci√≥n (puerto 80 y 5000)"
    Write-Host "  dev      - Iniciar en modo desarrollo con hot-reload (puerto 5173 y 5000)"
    Write-Host "  build    - Construir las im√°genes sin ejecutar"
    Write-Host "  stop     - Detener todos los servicios"
    Write-Host "  clean    - Limpiar contenedores, im√°genes y vol√∫menes"
    Write-Host "  logs     - Mostrar logs de todos los servicios"
    Write-Host "  status   - Mostrar estado de los servicios"
    Write-Host "  help     - Mostrar esta ayuda"
    Write-Host ""
}

# Funci√≥n para iniciar en modo producci√≥n
function Start-Production {
    Write-Header "Iniciando en modo PRODUCCI√ìN"
    Write-ColoredMessage "üîß Construyendo im√°genes..." "Yellow"
    
    try {
        docker-compose -f docker-compose.yml build
        
        Write-ColoredMessage "üöÄ Iniciando servicios..." "Yellow"
        docker-compose -f docker-compose.yml up -d
        
        Write-ColoredMessage "‚úÖ Aplicaci√≥n iniciada exitosamente!" "Green"
        Write-Host ""
        Write-ColoredMessage "üì± Frontend disponible en: http://localhost" "Cyan"
        Write-ColoredMessage "üîå Backend API disponible en: http://localhost:5000" "Cyan"
        Write-Host ""
        Write-ColoredMessage "Para ver los logs: .\start.ps1 logs" "Yellow"
        Write-ColoredMessage "Para detener: .\start.ps1 stop" "Yellow"
    }
    catch {
        Write-ColoredMessage "‚ùå Error al iniciar la aplicaci√≥n: $($_.Exception.Message)" "Red"
    }
}

# Funci√≥n para iniciar en modo desarrollo
function Start-Development {
    Write-Header "Iniciando en modo DESARROLLO"
    Write-ColoredMessage "üîß Construyendo im√°genes de desarrollo..." "Yellow"
    
    try {
        docker-compose -f docker-compose.dev.yml build
        
        Write-ColoredMessage "üöÄ Iniciando servicios de desarrollo..." "Yellow"
        docker-compose -f docker-compose.dev.yml up -d
        
        Write-ColoredMessage "‚úÖ Aplicaci√≥n de desarrollo iniciada!" "Green"
        Write-Host ""
        Write-ColoredMessage "üì± Frontend (Vite) disponible en: http://localhost:5173" "Cyan"
        Write-ColoredMessage "üîå Backend API disponible en: http://localhost:5000" "Cyan"
        Write-ColoredMessage "üóÑÔ∏è  Adminer (DB Admin) disponible en: http://localhost:8080" "Cyan"
        Write-Host ""
        Write-ColoredMessage "üí° Hot-reload habilitado para ambos servicios" "Yellow"
        Write-ColoredMessage "Para ver los logs: .\start.ps1 logs" "Yellow"
        Write-ColoredMessage "Para detener: .\start.ps1 stop" "Yellow"
    }
    catch {
        Write-ColoredMessage "‚ùå Error al iniciar la aplicaci√≥n: $($_.Exception.Message)" "Red"
    }
}

# Funci√≥n para construir sin ejecutar
function Build-Images {
    Write-Header "Construyendo im√°genes"
    
    try {
        Write-ColoredMessage "üîß Construyendo imagen de producci√≥n..." "Yellow"
        docker-compose -f docker-compose.yml build
        
        Write-ColoredMessage "üîß Construyendo imagen de desarrollo..." "Yellow"
        docker-compose -f docker-compose.dev.yml build
        
        Write-ColoredMessage "‚úÖ Todas las im√°genes construidas exitosamente!" "Green"
    }
    catch {
        Write-ColoredMessage "‚ùå Error al construir las im√°genes: $($_.Exception.Message)" "Red"
    }
}

# Funci√≥n para detener servicios
function Stop-Services {
    Write-Header "Deteniendo servicios"
    
    try {
        docker-compose -f docker-compose.yml down 2>$null
        docker-compose -f docker-compose.dev.yml down 2>$null
        Write-ColoredMessage "‚úÖ Todos los servicios detenidos" "Green"
    }
    catch {
        Write-ColoredMessage "‚ö†Ô∏è  Algunos servicios podr√≠an no haberse detenido correctamente" "Yellow"
    }
}

# Funci√≥n para limpiar todo
function Clean-All {
    Write-Header "Limpiando sistema Docker"
    Write-ColoredMessage "‚ö†Ô∏è  Esto eliminar√° contenedores, im√°genes y vol√∫menes" "Yellow"
    
    $confirmation = Read-Host "¬øContinuar? (y/N)"
    if ($confirmation -eq 'y' -or $confirmation -eq 'Y') {
        try {
            docker-compose -f docker-compose.yml down --volumes --rmi all 2>$null
            docker-compose -f docker-compose.dev.yml down --volumes --rmi all 2>$null
            docker system prune -f
            Write-ColoredMessage "‚úÖ Sistema limpio" "Green"
        }
        catch {
            Write-ColoredMessage "‚ö†Ô∏è  Algunos elementos podr√≠an no haberse eliminado completamente" "Yellow"
        }
    }
    else {
        Write-ColoredMessage "‚ùå Operaci√≥n cancelada" "Yellow"
    }
}

# Funci√≥n para mostrar logs
function Show-Logs {
    Write-Header "Logs de servicios"
    
    try {
        $prodRunning = docker-compose -f docker-compose.yml ps | Select-String "Up"
        $devRunning = docker-compose -f docker-compose.dev.yml ps | Select-String "Up"
        
        if ($prodRunning) {
            docker-compose -f docker-compose.yml logs -f
        }
        elseif ($devRunning) {
            docker-compose -f docker-compose.dev.yml logs -f
        }
        else {
            Write-ColoredMessage "‚ùå No hay servicios ejecut√°ndose" "Red"
        }
    }
    catch {
        Write-ColoredMessage "‚ùå Error al obtener logs: $($_.Exception.Message)" "Red"
    }
}

# Funci√≥n para mostrar estado
function Show-Status {
    Write-Header "Estado de servicios"
    
    try {
        Write-Host "Servicios de Producci√≥n:"
        docker-compose -f docker-compose.yml ps
        Write-Host ""
        Write-Host "Servicios de Desarrollo:"
        docker-compose -f docker-compose.dev.yml ps
    }
    catch {
        Write-ColoredMessage "‚ùå Error al obtener el estado: $($_.Exception.Message)" "Red"
    }
}

# Funci√≥n principal
function Main {
    if (-not (Test-Docker)) {
        exit 1
    }
    
    switch ($Command.ToLower()) {
        "prod" { Start-Production }
        "production" { Start-Production }
        "dev" { Start-Development }
        "development" { Start-Development }
        "build" { Build-Images }
        "stop" { Stop-Services }
        "clean" { Clean-All }
        "logs" { Show-Logs }
        "status" { Show-Status }
        default { Show-Help }
    }
}

# Ejecutar funci√≥n principal
Main
